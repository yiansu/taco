// Generated by the Tensor Algebra Compiler (tensor-compiler.org)
// taco "A(i, j, k) = B(i, j, l) * C(k, l)" -f=A:ddd -f=B:dss -f=C:dd -write-assembly=assemble.hpp -write-compute=compute.hpp
// clang++ -std=c++17 -O3 -DNDEBUG -DTACO -I ../../include -L../../build/lib TTM.cpp -o main -ltaco

#include <random>
#include "taco.h"
#include "assemble.hpp"
#include "compute.hpp"

using namespace taco;
int main(int argc, char* argv[]) {
  std::default_random_engine gen(0);
  std::uniform_real_distribution<double> unif(0.0, 1.0);

  Format ddd({Dense, Dense, Dense});
  Format dss({Dense, Sparse, Sparse});
  Format dd({Dense, Dense});

  auto tensor_file = "inputs/nell-2.tns";
  if (const auto env_p = std::getenv("INPUT_TENSOR")) {
    tensor_file = env_p;
  }
  Tensor<double> B = read(tensor_file, dss);
  for (auto dim : B.getDimensions()) {
    printf("dim = %d\n", dim);
  }

  Tensor<double> C({16, B.getDimension(2)}, dd);
  for (int i = 0; i < C.getDimension(0); ++i) {
    for (int j = 0; j < C.getDimension(1); ++j) {
      C.insert({i, j}, unif(gen));
    }
  }
  C.pack();

  Tensor<double> A({B.getDimension(0), B.getDimension(1), 16}, ddd);
  A.pack();

  assemble(A.getTacoTensorT(), B.getTacoTensorT(), C.getTacoTensorT());
  compute(A.getTacoTensorT(), B.getTacoTensorT(), C.getTacoTensorT());

  return 0;
}
