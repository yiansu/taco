// Generated by the Tensor Algebra Compiler (tensor-compiler.org)
// taco "A(i, j) = B(i, j, k) * c(k)" -f=A:dd -f=B:dss -f=c:d -write-assembly=assemble.hpp -write-compute=compute.hpp

#if defined(USE_BASELINE) || defined(USE_FORKJOIN)
#include <functional>
#include <taskparts/benchmark.hpp>
#elif defined(USE_OPENMP)
#include "utility.hpp"
#else
#include "loop_handler.hpp"
#endif

#if defined(TEST_CORRECTNESS)
#include "taco.h"
using namespace taco;
#endif

#if defined(USE_BASELINE) || defined(TEST_CORRECTNESS)
void TTV_baseline(
  int B1_dimension,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  for (uint64_t i = 0; i < B1_dimension; i++) {
    for (uint64_t jB = B2_pos[i]; jB < B2_pos[(i + 1)]; jB++) {
      uint64_t j = B2_crd[jB];
      uint64_t jA = i * A2_dimension + j;
      double tkA_val = 0.0;
      for (uint64_t kB = B3_pos[jB]; kB < B3_pos[(jB + 1)]; kB++) {
        uint64_t k = B3_crd[kB];
        tkA_val += B_vals[kB] * c_vals[k];
      }
      A_vals[jA] = tkA_val;
    }
  }
}

#if defined(TEST_CORRECTNESS)
void test_correctness(taco_tensor_t *A, taco_tensor_t *B, taco_tensor_t *c) {
  Format dd({Dense, Dense});
  Tensor<double> A_ref({A->dimensions[0], A->dimensions[1]}, dd);
  A_ref.pack();

  taco_tensor_t *A_ref_taco = A_ref.getTacoTensorT();
  assemble(A_ref_taco, A_ref_taco, A_ref_taco);

  int A1_dimension = (int)(A_ref_taco->dimensions[0]);
  int A2_dimension = (int)(A_ref_taco->dimensions[1]);
  double* __restrict__ A_vals = (double*)(A->vals);
  double* __restrict__ A_ref_taco_vals = (double*)(A_ref_taco->vals);
  int B1_dimension = (int)(B->dimensions[0]);
  int* __restrict__ B2_pos = (int*)(B->indices[1][0]);
  int* __restrict__ B2_crd = (int*)(B->indices[1][1]);
  int* __restrict__ B3_pos = (int*)(B->indices[2][0]);
  int* __restrict__ B3_crd = (int*)(B->indices[2][1]);
  double* __restrict__ B_vals = (double*)(B->vals);
  int c1_dimension = (int)(c->dimensions[0]);
  double* __restrict__ c_vals = (double*)(c->vals);

  // #pragma omp parallel for schedule(static)
  for (uint64_t pA = 0; pA < (A1_dimension * A2_dimension); pA++) {
    A_ref_taco_vals[pA] = 0.0;
  }

  TTV_baseline(B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_ref_taco_vals);

  uint64_t num_diffs = 0;
  double epsilon = 0.01;
  for (uint64_t i = 0; i < (A1_dimension * A2_dimension); i++) {
    auto diff = std::abs(A_vals[i] - A_ref_taco_vals[i]);
    if (diff > epsilon) {
      printf("diff=%f A_vals[i]=%f A_ref_taco_vals[i]=%f at i=%d\n", diff, A_vals[i], A_ref_taco_vals[i], i);
      num_diffs++;
    }
  }
  if (num_diffs > 0) {
    printf("\033[0;31mINCORRECT!\033[0m");
    printf("  num_diffs = %lu\n", num_diffs);
  } else {
    printf("\033[0;32mCORRECT!\033[0m\n");
  }
}
#endif
#endif

#if defined(USE_OPENMP)
void TTV_openmp(
  int B1_dimension,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
#if defined(OMP_SCHEDULE_STATIC)
  #pragma omp parallel for schedule(static)
#elif defined(OMP_SCHEDULE_DYNAMIC)
  #pragma omp parallel for schedule(dynamic)
#elif defined(OMP_SCHEDULE_GUIDED)
  #pragma omp parallel for schedule(guided)
#endif
  for (uint64_t i = 0; i < B1_dimension; i++) {
    for (uint64_t jB = B2_pos[i]; jB < B2_pos[(i + 1)]; jB++) {
      uint64_t j = B2_crd[jB];
      uint64_t jA = i * A2_dimension + j;
      double tkA_val = 0.0;
      for (uint64_t kB = B3_pos[jB]; kB < B3_pos[(jB + 1)]; kB++) {
        uint64_t k = B3_crd[kB];
        tkA_val += B_vals[kB] * c_vals[k];
      }
      A_vals[jA] = tkA_val;
    }
  }
}

#elif defined(USE_FORKJOIN)
void TTV_serial(
  int startIter,
  int maxIter,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  for (uint64_t i = startIter; i < maxIter; i++) {
    for (uint64_t jB = B2_pos[i]; jB < B2_pos[(i + 1)]; jB++) {
      uint64_t j = B2_crd[jB];
      uint64_t jA = i * A2_dimension + j;
      double tkA_val = 0.0;
      for (uint64_t kB = B3_pos[jB]; kB < B3_pos[(jB + 1)]; kB++) {
        uint64_t k = B3_crd[kB];
        tkA_val += B_vals[kB] * c_vals[k];
      }
      A_vals[jA] = tkA_val;
    }
  }
}

void TTV_forkjoin(
  int startIter,
  int maxIter,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  if (maxIter - startIter > FORKJOIN_GRAIN_SIZE) {
    int midIter = (startIter + maxIter) / 2;
    taskparts::tpalrts_promote_via_nativefj([&] {
      TTV_forkjoin(startIter, midIter, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals);
    }, [&] {
      TTV_forkjoin(midIter, maxIter, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals);
    }, [&] { }, taskparts::bench_scheduler());
  } else {
    TTV_serial(startIter, maxIter, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals);
  }
}

#elif defined(USE_HB_COMPILER)
#if defined(RUN_HEARTBEAT)
  bool run_heartbeat = true;
#else
  bool run_heartbeat = false;
#endif

double HEARTBEAT_loop2(
  uint64_t startIter,
  uint64_t maxIter,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals
) {
  double tkA_val = 0.0;
  for (uint64_t kB = startIter; kB < maxIter; kB++) {
    uint64_t k = B3_crd[kB];
    tkA_val += B_vals[kB] * c_vals[k];
  }
  return tkA_val;
}

void HEARTBEAT_loop1(
  uint64_t startIter,
  uint64_t maxIter,
  uint64_t i,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  for (uint64_t jB = startIter; jB < maxIter; jB++) {
    uint64_t j = B2_crd[jB];
    uint64_t jA = i * A2_dimension + j;
    double tkA_val = 0.0;
    tkA_val += HEARTBEAT_loop2(B3_pos[jB], B3_pos[(jB + 1)], B3_crd, B_vals, c_vals);
    A_vals[jA] = tkA_val;
  }
}

void HEARTBEAT_loop0(
  uint64_t B1_dimension,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  for (uint64_t i = 0; i < B1_dimension; i++) {
    HEARTBEAT_loop1(B2_pos[i], B2_pos[(i + 1)], i, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals);
  }
}

void TTV_hbc(
  int B1_dimension,
  int* __restrict__ B2_pos,
  int* __restrict__ B2_crd,
  int A2_dimension,
  int* __restrict__ B3_pos,
  int* __restrict__ B3_crd,
  double* __restrict__ B_vals,
  double* __restrict__ c_vals,
  double* __restrict__ A_vals
) {
  HEARTBEAT_loop0(B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals);
}
#endif

int compute(taco_tensor_t *A, taco_tensor_t *B, taco_tensor_t *c) {
  int A1_dimension = (int)(A->dimensions[0]);
  int A2_dimension = (int)(A->dimensions[1]);
  // double* __restrict__ A_vals = (double*)(A->vals);
  double * A_vals = (double*)malloc(10 * sizeof(double) * (A1_dimension * A2_dimension));
  int B1_dimension = (int)(B->dimensions[0]);
  int* __restrict__ B2_pos = (int*)(B->indices[1][0]);
  int* __restrict__ B2_crd = (int*)(B->indices[1][1]);
  int* __restrict__ B3_pos = (int*)(B->indices[2][0]);
  int* __restrict__ B3_crd = (int*)(B->indices[2][1]);
  double* __restrict__ B_vals = (double*)(B->vals);
  int c1_dimension = (int)(c->dimensions[0]);
  double* __restrict__ c_vals = (double*)(c->vals);

  // #pragma omp parallel for schedule(static)
  for (uint64_t pA = 0; pA < 10 * (A1_dimension * A2_dimension); pA++) {
    A_vals[pA] = 0.0;
  }

#if defined(USE_BASELINE) || defined(USE_FORKJOIN)
  taskparts::benchmark_nativeforkjoin([&] (auto sched) {
#elif defined(USE_OPENMP)
  utility::run([&] {
#elif defined(USE_HB_COMPILER)
  run_bench([&] {
#endif

    for (int i = 0; i < 10; i++) {
#if defined(USE_BASELINE)
      TTV_baseline(B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals + i * (A1_dimension * A2_dimension));
#elif defined(USE_OPENMP)
      TTV_openmp(B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals + i * (A1_dimension * A2_dimension));
#elif defined(USE_FORKJOIN)
      TTV_forkjoin(0, B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals + i * (A1_dimension * A2_dimension));
#elif defined(USE_HB_COMPILER)
      TTV_hbc(B1_dimension, B2_pos, B2_crd, A2_dimension, B3_pos, B3_crd, B_vals, c_vals, A_vals + i * (A1_dimension * A2_dimension));
#endif
    }

#if defined(TEST_CORRECTNESS)
    test_correctness(A, B, c);
#endif

#if defined(USE_BASELINE) || defined(USE_FORKJOIN)
  }, [&] (auto sched) {
  }, [&] (auto sched) {
  });
#else
  }, [&] {}, [&] {});
#endif

  return 0;
}
